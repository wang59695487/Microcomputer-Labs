C51 COMPILER V9.57.0.0   LCD                                                               02/11/2020 20:59:02 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN ..\OBJ\lcd.obj
COMPILER INVOKED BY: D:\WORK\keil-v5\C51\BIN\C51.EXE ..\HARDWARE\src\lcd.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\HARDWARE\i
                    -nc) DEBUG OBJECTEXTEND PRINT(.\lcd.lst) OBJECT(..\OBJ\lcd.obj)

line level    source

   1          #include"lcd.h"
   2          #include"ds1302.h"
   3          #include"temp.h"
   4          #include"51it.h"
   5          
   6          /*******************************************************************************
   7          * 函 数 名         : LcdWriteCom
   8          * 函数功能                 : 向LCD写入一个字节的命令
   9          * 输    入         : com
  10          * 输    出         : 无
  11          *******************************************************************************/
  12          #ifndef         LCD1602_4PINS    //当没有定义这个LCD1602_4PINS时
  13          void LcdWriteCom(uchar com)       //写入命令
  14          {
  15   1              LCD1602_E = 0;     //使能
  16   1              LCD1602_RS = 0;    //选择发送命令
  17   1              LCD1602_RW = 0;    //选择写入
  18   1              
  19   1              LCD1602_DATAPINS = com;     //放入命令
  20   1              Delay_ms(1);            //等待数据稳定
  21   1      
  22   1              LCD1602_E = 1;            //写入时序
  23   1              Delay_ms(5);      //保持时间
  24   1              LCD1602_E = 0;
  25   1      }
  26          #else 
              void LcdWriteCom(uchar com)       //写入命令
              {
                      LCD1602_E = 0;   //使能清零
                      LCD1602_RS = 0;  //选择写入命令
                      LCD1602_RW = 0;  //选择写入
              
                      LCD1602_DATAPINS = com; //由于4位的接线是接到P0口的高四位，所以传送高四位不用改
                      Delay_ms(1);
              
                      LCD1602_E = 1;   //写入时序
                      Delay_ms(5);
                      LCD1602_E = 0;
              
              //      Lcd1602_Delay1ms(1);
                      LCD1602_DATAPINS = com << 4; //发送低四位
                      Delay_ms(1);
              
                      LCD1602_E = 1;   //写入时序
                      Delay_ms(5);
                      LCD1602_E = 0;
              }
              #endif
  49          /*******************************************************************************
  50          * 函 数 名         : LcdWriteData
  51          * 函数功能                 : 向LCD写入一个字节的数据
  52          * 输    入         : dat
  53          * 输    出         : 无
  54          *******************************************************************************/                   
C51 COMPILER V9.57.0.0   LCD                                                               02/11/2020 20:59:02 PAGE 2   

  55          #ifndef         LCD1602_4PINS              
  56          void LcdWriteData(uchar dat)                    //写入数据
  57          {
  58   1              LCD1602_E = 0;  //使能清零
  59   1              LCD1602_RS = 1; //选择输入数据
  60   1              LCD1602_RW = 0; //选择写入
  61   1      
  62   1              LCD1602_DATAPINS = dat; //写入数据
  63   1              Delay_ms(1);
  64   1      
  65   1              LCD1602_E = 1;   //写入时序
  66   1              Delay_ms(5);   //保持时间
  67   1              LCD1602_E = 0;
  68   1      }
  69          #else
              void LcdWriteData(uchar dat)                    //写入数据
              {
                      LCD1602_E = 0;    //使能清零
                      LCD1602_RS = 1;   //选择写入数据
                      LCD1602_RW = 0;   //选择写入
              
                      LCD1602_DATAPINS = dat; //由于4位的接线是接到P0口的高四位，所以传送高四位不用改
                      Delay_ms(1);
              
                      LCD1602_E = 1;    //写入时序
                      Delay_ms(5);
                      LCD1602_E = 0;
              
                      LCD1602_DATAPINS = dat << 4; //写入低四位
                      Delay_ms(1);
              
                      LCD1602_E = 1;    //写入时序
                      Delay_ms(5);
                      LCD1602_E = 0;
              }
              #endif
  91          /*******************************************************************************
  92          * 函 数 名       : LcdInit()
  93          * 函数功能               : 初始化LCD屏
  94          * 输    入       : 无
  95          * 输    出       : 无
  96          *******************************************************************************/                   
  97          #ifndef         LCD1602_4PINS
  98          void LcdInit()                                            //LCD初始化子程序
  99          {
 100   1              u8 i;
 101   1              uchar String[] = {"Welcome!"};
 102   1              LcdWriteCom(0x38);  //开显示
 103   1              LcdWriteCom(0x0c);  //开显示不显示光标
 104   1              LcdWriteCom(0x06);  //写一个指针加1
 105   1              LcdWriteCom(0x01);  //清屏
 106   1              LcdWriteCom(0x84);  //设置数据指针起点
 107   1              
 108   1              for(i=0;i<8;i++)
 109   1              {
 110   2                      LcdWriteData(String[i]);        
 111   2              }
 112   1              Delay_ms(2000);
 113   1              LcdWriteCom(0x01);  //清屏
 114   1              
 115   1              
 116   1              
C51 COMPILER V9.57.0.0   LCD                                                               02/11/2020 20:59:02 PAGE 3   

 117   1      }
 118          #else
              void LcdInit()                                            //LCD初始化子程序
              {
                      LcdWriteCom(0x32);       //将8位总线转为4位总线
                      LcdWriteCom(0x28);       //在四位线下的初始化
                      LcdWriteCom(0x0c);  //开显示不显示光标
                      LcdWriteCom(0x06);  //写一个指针加1
                      LcdWriteCom(0x01);  //清屏
                      LcdWriteCom(0x80);  //设置数据指针起点
              }
              #endif
 129          
 130          
 131          /*******************************************************************************
 132          * 函数名         : Lcd_TimeDisplay()
 133          * 函数功能                 : 显示时间函数
 134          * 输入           : 无
 135          * 输出           : 无
 136          *******************************************************************************/
 137          
 138          void Lcd_TimeDisplay()
 139          {
 140   1              u8 Week,i;
 141   1              LcdWriteCom(0x80+0X40);
 142   1              LcdWriteData('0'+TIME[2]/16);                           //时
 143   1              LcdWriteData('0'+(TIME[2]&0x0f));                                
 144   1              LcdWriteData(':');
 145   1              LcdWriteData('0'+TIME[1]/16);                           //分
 146   1              LcdWriteData('0'+(TIME[1]&0x0f));       
 147   1              LcdWriteData(':');
 148   1              LcdWriteData('0'+TIME[0]/16);                           //秒
 149   1              LcdWriteData('0'+(TIME[0]&0x0f));
 150   1      
 151   1              LcdWriteCom(0x80);
 152   1              LcdWriteData('2');
 153   1              LcdWriteData('0');
 154   1              LcdWriteData('0'+TIME[6]/16);                   //年
 155   1              LcdWriteData('0'+(TIME[6]&0x0f));
 156   1              LcdWriteData('-');
 157   1              LcdWriteData('0'+TIME[4]/16);                   //月
 158   1              LcdWriteData('0'+(TIME[4]&0x0f));
 159   1              LcdWriteData('-');
 160   1              LcdWriteData('0'+TIME[3]/16);                   //日
 161   1              LcdWriteData('0'+(TIME[3]&0x0f));
 162   1              LcdWriteCom(0x8B);
 163   1              Week=TIME[5]&0x07;
 164   1              switch(Week)
 165   1              {
 166   2                      case(1):
 167   2                      {
 168   3                              for(i=0;i<5;i++)
 169   3                              {
 170   4                                      LcdWriteData(Monday[i]);        
 171   4                              }
 172   3                              break;//显示秒个位
 173   3                      }
 174   2                      case(2):
 175   2                      {
 176   3                              for(i=0;i<5;i++)
 177   3                              {
 178   4                                      LcdWriteData(Tuesday[i]);       
C51 COMPILER V9.57.0.0   LCD                                                               02/11/2020 20:59:02 PAGE 4   

 179   4                              }
 180   3                              break;//显示秒个位
 181   3                      }
 182   2                      case(3):
 183   2                      {
 184   3                              for(i=0;i<5;i++)
 185   3                              {
 186   4                                      LcdWriteData(Wednesday[i]);     
 187   4                              }
 188   3                              break;//显示秒个位
 189   3                      }
 190   2                      case(4):
 191   2                      {
 192   3                              for(i=0;i<5;i++)
 193   3                              {
 194   4                                      LcdWriteData(Thursday[i]);      
 195   4                              }
 196   3                              break;//显示秒个位
 197   3                      }
 198   2                      case(5):
 199   2                      {
 200   3                              for(i=0;i<5;i++)
 201   3                              {
 202   4                                      LcdWriteData(Friday[i]);        
 203   4                              }
 204   3                              break;//显示秒个位
 205   3                      }
 206   2                      case(6):
 207   2                      {
 208   3                              for(i=0;i<5;i++)
 209   3                              {
 210   4                                      LcdWriteData(Saturday[i]);      
 211   4                              }
 212   3                              break;//显示秒个位
 213   3                      }
 214   2                      case(7):
 215   2                      {
 216   3                              for(i=0;i<5;i++)
 217   3                              {
 218   4                                      LcdWriteData(Sunday[i]);        
 219   4                              }
 220   3                              break;//显示秒个位
 221   3                      }
 222   2              
 223   2              }
 224   1              LcdWriteCom(0x8E+0X40);
 225   1              if(Alarm_SetState)
 226   1              LcdWriteData('O');
 227   1              else
 228   1              LcdWriteData('C');      
 229   1      }
 230          
 231          /*******************************************************************************
 232          * 函数名         : Lcd_AlarmDisplay()
 233          * 函数功能                 : 显示闹钟时间函数
 234          * 输入           : 无
 235          * 输出           : 无
 236          *******************************************************************************/
 237          void Lcd_AlarmDisplay(void)
 238          {
 239   1              u8 Week,i;
 240   1              LcdWriteCom(0x80+0X40);
C51 COMPILER V9.57.0.0   LCD                                                               02/11/2020 20:59:02 PAGE 5   

 241   1              LcdWriteData('0'+ALARM[2]/16);                          //时
 242   1              LcdWriteData('0'+(ALARM[2]&0x0f));                               
 243   1              LcdWriteData(':');
 244   1              LcdWriteData('0'+ALARM[1]/16);                          //分
 245   1              LcdWriteData('0'+(ALARM[1]&0x0f));      
 246   1              LcdWriteData(':');
 247   1              LcdWriteData('0'+ALARM[0]/16);                          //秒
 248   1              LcdWriteData('0'+(ALARM[0]&0x0f));
 249   1      
 250   1              LcdWriteCom(0x80);
 251   1              LcdWriteData('2');
 252   1              LcdWriteData('0');
 253   1              LcdWriteData('0'+ALARM[6]/16);                  //年
 254   1              LcdWriteData('0'+(ALARM[6]&0x0f));
 255   1              LcdWriteData('-');
 256   1              LcdWriteData('0'+ALARM[4]/16);                  //月
 257   1              LcdWriteData('0'+(ALARM[4]&0x0f));
 258   1              LcdWriteData('-');
 259   1              LcdWriteData('0'+ALARM[3]/16);                  //日
 260   1              LcdWriteData('0'+(ALARM[3]&0x0f));
 261   1              LcdWriteCom(0x8B);
 262   1              Week=ALARM[5]&0x07;
 263   1              switch(Week)
 264   1              {
 265   2                      case(1):
 266   2                      {
 267   3                              for(i=0;i<5;i++)
 268   3                              {
 269   4                                      LcdWriteData(Monday[i]);        
 270   4                              }
 271   3                              break;//显示秒个位
 272   3                      }
 273   2                      case(2):
 274   2                      {
 275   3                              for(i=0;i<5;i++)
 276   3                              {
 277   4                                      LcdWriteData(Tuesday[i]);       
 278   4                              }
 279   3                              break;//显示秒个位
 280   3                      }
 281   2                      case(3):
 282   2                      {
 283   3                              for(i=0;i<5;i++)
 284   3                              {
 285   4                                      LcdWriteData(Wednesday[i]);     
 286   4                              }
 287   3                              break;//显示秒个位
 288   3                      }
 289   2                      case(4):
 290   2                      {
 291   3                              for(i=0;i<5;i++)
 292   3                              {
 293   4                                      LcdWriteData(Thursday[i]);      
 294   4                              }
 295   3                              break;//显示秒个位
 296   3                      }
 297   2                      case(5):
 298   2                      {
 299   3                              for(i=0;i<5;i++)
 300   3                              {
 301   4                                      LcdWriteData(Friday[i]);        
 302   4                              }
C51 COMPILER V9.57.0.0   LCD                                                               02/11/2020 20:59:02 PAGE 6   

 303   3                              break;//显示秒个位
 304   3                      }
 305   2                      case(6):
 306   2                      {
 307   3                              for(i=0;i<5;i++)
 308   3                              {
 309   4                                      LcdWriteData(Saturday[i]);      
 310   4                              }
 311   3                              break;//显示秒个位
 312   3                      }
 313   2                      case(7):
 314   2                      {
 315   3                              for(i=0;i<5;i++)
 316   3                              {
 317   4                                      LcdWriteData(Sunday[i]);        
 318   4                              }
 319   3                              break;//显示秒个位
 320   3                      }       
 321   2              }
 322   1              LcdWriteCom(0x8B+0X40);
 323   1              for(i=0;i<1;i++)
 324   1              {
 325   2                      LcdWriteData(LCD_Alarm[i]);     
 326   2              }
 327   1              LcdWriteCom(0x8E+0X40);
 328   1              if(Alarm_SetState)
 329   1              LcdWriteData('O');
 330   1              else
 331   1              LcdWriteData('C');
 332   1      }
 333          
 334          
 335          
 336          /*******************************************************************************
 337          * 函数名         : Lcd_TempDisplay()
 338          * 函数功能                 : 显示温度读取函数
 339          * 输入           : temp
 340          * 输出           : 无
 341          *******************************************************************************/
 342          void Lcd_TempDisplay(int temp)   
 343          {
 344   1              uchar i;
 345   1              float tp; 
 346   1              LcdWriteCom(0x80);
 347   1              for(i=0;i<5;i++)
 348   1              {
 349   2                      LcdWriteData(LCD_Temp[i]);      
 350   2              }
 351   1                       
 352   1              if(temp< 0)                             //当温度值为负数
 353   1              {
 354   2                      Tmep_Data[0]=0xb0;                //   -
 355   2                      //因为读取的温度是实际温度的补码，所以减1，再取反求出原码
 356   2                      temp=temp-1;
 357   2                      temp=~temp;
 358   2                      tp=temp;
 359   2                      temp=tp*0.0625*100+0.5; 
 360   2                      //留两个小数点就*100，+0.5是四舍五入，因为C语言浮点数转换为整型的时候把小数点
 361   2                      //后面的数自动去掉，不管是否大于0.5，而+0.5之后大于0.5的就是进1了，小于0.5的就
 362   2                      //算加上0.5，还是在小数点后面。
 363   2       
 364   2              }
C51 COMPILER V9.57.0.0   LCD                                                               02/11/2020 20:59:02 PAGE 7   

 365   1              else
 366   1              {                       
 367   2                      Tmep_Data[0]=0x2b;                //   +
 368   2                      tp=temp;//因为数据处理有小数点所以将温度赋给一个浮点型变量
 369   2                      //如果温度是正的那么，那么正数的原码就是补码它本身
 370   2                      temp=tp*0.0625*100+0.5; 
 371   2                      //留两个小数点就*100，+0.5是四舍五入，因为C语言浮点数转换为整型的时候把小数点
 372   2                      //后面的数自动去掉，不管是否大于0.5，而+0.5之后大于0.5的就是进1了，小于0.5的就
 373   2                      //算加上0.5，还是在小数点后面。
 374   2              }
 375   1      //      value=temp / 10000;
 376   1              Tmep_Data[1] = (temp / 10000)        | 0x30;
 377   1              Tmep_Data[2] = (temp % 10000 / 1000) | 0x30;
 378   1              Tmep_Data[3] = (temp % 1000 / 100)   | 0x30;
 379   1              Tmep_Data[5] = (temp % 100 / 10)     | 0x30;
 380   1              Tmep_Data[6] = (temp % 10)           | 0x30;
 381   1              
 382   1              Tmep_Data[4] = 0x2e;  //0010 1110  .
 383   1              Tmep_Data[7] = 0xdf ; //   1101  1111  。
 384   1              Tmep_Data[8] = 0x43;// 0100  0011  C
 385   1              
 386   1              
 387   1      
 388   1              for(i=0;i<9;i++)
 389   1              {
 390   2                      LcdWriteData(Tmep_Data[i]);     
 391   2              }       
 392   1      
 393   1      }
 394          
 395          /*******************************************************************************
 396          * 函数名         : LcdDisplay()
 397          * 函数功能                 : 显示函数
 398          * 输入           : temp
 399          * 输出           : 无
 400          *******************************************************************************/
 401          void LcdDisplay(void)    
 402          {
 403   1              if(SetState==0)
 404   1              {
 405   2                      Ds1302ReadTime();
 406   2              }
 407   1              switch(LCD_MODE)
 408   1              {
 409   2                      case TIME_MODE: 
 410   2                               Lcd_TimeDisplay();
 411   2                      break;
 412   2                      
 413   2                      case TEMP_MODE: 
 414   2                               Lcd_TempDisplay(Ds18b20ReadTemp());
 415   2                      break;
 416   2                      
 417   2                      case ALARM_MODE: 
 418   2                               Lcd_AlarmDisplay();
 419   2                      break;
 420   2              }
 421   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1141    ----
   CONSTANT SIZE    =      9    ----
C51 COMPILER V9.57.0.0   LCD                                                               02/11/2020 20:59:02 PAGE 8   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      19
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
